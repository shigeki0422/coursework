// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jpassion.myproject.mydomain;

import com.jpassion.myproject.mydomain.Flight;
import com.jpassion.myproject.mydomain.Itinerary;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Itinerary_Roo_Finder {
    
    public static Long Itinerary.countFindItinerarysByFlights(Set<Flight> flights) {
        if (flights == null) throw new IllegalArgumentException("The flights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Itinerary AS o WHERE");
        for (int i = 0; i < flights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :flights_item").append(i).append(" MEMBER OF o.flights");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int flightsIndex = 0;
        for (Flight _flight: flights) {
            q.setParameter("flights_item" + flightsIndex++, _flight);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Itinerary.countFindItinerarysByReturnflights(Set<Flight> returnflights) {
        if (returnflights == null) throw new IllegalArgumentException("The returnflights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Itinerary AS o WHERE");
        for (int i = 0; i < returnflights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :returnflights_item").append(i).append(" MEMBER OF o.returnflights");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int returnflightsIndex = 0;
        for (Flight _flight: returnflights) {
            q.setParameter("returnflights_item" + returnflightsIndex++, _flight);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Itinerary.countFindItinerarysByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Itinerary.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Itinerary AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByFlights(Set<Flight> flights) {
        if (flights == null) throw new IllegalArgumentException("The flights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Itinerary AS o WHERE");
        for (int i = 0; i < flights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :flights_item").append(i).append(" MEMBER OF o.flights");
        }
        TypedQuery<Itinerary> q = em.createQuery(queryBuilder.toString(), Itinerary.class);
        int flightsIndex = 0;
        for (Flight _flight: flights) {
            q.setParameter("flights_item" + flightsIndex++, _flight);
        }
        return q;
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByFlights(Set<Flight> flights, String sortFieldName, String sortOrder) {
        if (flights == null) throw new IllegalArgumentException("The flights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Itinerary AS o WHERE");
        for (int i = 0; i < flights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :flights_item").append(i).append(" MEMBER OF o.flights");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Itinerary> q = em.createQuery(queryBuilder.toString(), Itinerary.class);
        int flightsIndex = 0;
        for (Flight _flight: flights) {
            q.setParameter("flights_item" + flightsIndex++, _flight);
        }
        return q;
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByReturnflights(Set<Flight> returnflights) {
        if (returnflights == null) throw new IllegalArgumentException("The returnflights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Itinerary AS o WHERE");
        for (int i = 0; i < returnflights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :returnflights_item").append(i).append(" MEMBER OF o.returnflights");
        }
        TypedQuery<Itinerary> q = em.createQuery(queryBuilder.toString(), Itinerary.class);
        int returnflightsIndex = 0;
        for (Flight _flight: returnflights) {
            q.setParameter("returnflights_item" + returnflightsIndex++, _flight);
        }
        return q;
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByReturnflights(Set<Flight> returnflights, String sortFieldName, String sortOrder) {
        if (returnflights == null) throw new IllegalArgumentException("The returnflights argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Itinerary AS o WHERE");
        for (int i = 0; i < returnflights.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :returnflights_item").append(i).append(" MEMBER OF o.returnflights");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Itinerary> q = em.createQuery(queryBuilder.toString(), Itinerary.class);
        int returnflightsIndex = 0;
        for (Flight _flight: returnflights) {
            q.setParameter("returnflights_item" + returnflightsIndex++, _flight);
        }
        return q;
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Itinerary.entityManager();
        TypedQuery<Itinerary> q = em.createQuery("SELECT o FROM Itinerary AS o WHERE o.username = :username", Itinerary.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<Itinerary> Itinerary.findItinerarysByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Itinerary.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Itinerary AS o WHERE o.username = :username");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Itinerary> q = em.createQuery(queryBuilder.toString(), Itinerary.class);
        q.setParameter("username", username);
        return q;
    }
    
}
